{
  "name": "postcss-value-parser",
  "version": "3.1.2",
  "description": "Transforms css values and at-rule params into the tree",
  "main": "lib/index.js",
  "files": [
    "lib"
  ],
  "devDependencies": {
    "eslint": "^1.1.0",
    "tap-spec": "^4.1.0",
    "tape": "^4.2.0"
  },
  "scripts": {
    "test": "eslint lib test && tape test/*.js | tap-spec"
  },
  "author": {
    "name": "Bogdan Chadkin",
    "email": "trysound@yandex.ru"
  },
  "license": "MIT",
  "homepage": "https://github.com/TrySound/postcss-value-parser",
  "repository": {
    "type": "git",
    "url": "https://github.com/TrySound/postcss-value-parser.git"
  },
  "keywords": [
    "postcss",
    "value",
    "parser"
  ],
  "bugs": {
    "url": "https://github.com/TrySound/postcss-value-parser/issues"
  },
  "readme": "[![Travis CI](https://travis-ci.org/TrySound/postcss-value-parser.svg)](https://travis-ci.org/TrySound/postcss-value-parser)\r\n\r\n# postcss-value-parser\r\n\r\nTransforms css values and at-rule params into the tree.\r\n\r\n## Usage\r\n\r\n```js\r\nvar parser = require('postcss-value-parser');\r\n\r\n/*{\r\n    nodes: [\r\n      type: 'function',\r\n      value: 'rgba',\r\n      before: '',\r\n      after: '',\r\n      nodes: [\r\n        { type: 'word', value: '233' },\r\n        { type: 'div', value: ',', before: '', after: ' ' },\r\n        { type: 'word', value: '45' },\r\n        { type: 'div', value: ',', before: '', after: ' ' },\r\n        { type: 'word', value: '66' },\r\n        { type: 'div', value: ',', before: ' ', after: '' },\r\n        { type: 'word', value: '.5' }\r\n      ]\r\n    ]\r\n  }*/\r\nparser('rgba(233, 45, 66 ,.5)').walk(function (node) {\r\n  if (node.type === 'function' && node.value === 'rgba') {\r\n    var color = node.nodes.filter(function (node) {\r\n      return node.type === 'word';\r\n    }).map(function (node) {\r\n      return Number(node.value);\r\n    }); // [233, 45, 66, .5]\r\n\r\n    node.type = 'word';\r\n    node.value = convertToHex(color);\r\n  }\r\n}).toString(); // #E92D42\r\n```\r\n\r\n### Prevent walking into function\r\n\r\n```js\r\nparser('url(some url) 50% 50%')\r\n  .walk(function (node) {\r\n    // Your code\r\n\r\n    if (node.type === 'function' && node.value === 'url') {\r\n      return false;\r\n    }\r\n  })\r\n  .toString();\r\n```\r\n\r\n### Url node\r\n\r\n```\r\nurl( /path/to/image )\r\n```\r\n\r\nwill be parsed to\r\n\r\n```js\r\n[{\r\n  type: 'function',\r\n  value: 'url',\r\n  before: ' ',\r\n  after: ' ',\r\n  nodes: [\r\n    { type: 'word', value: '/path/to/image' }\r\n  ]\r\n}]\r\n```\r\n\r\n## Node types\r\n\r\n- `{ type: 'word', value: 'any' }`\r\n- `{ type: 'string', value: 'string', quote: '\"' }`\r\n- `{ type: 'string', value: 'string', quote: '\\'' }`\r\n- `{ type: 'div', value: '/' , before: ' ', after: ' ' }`\r\n- `{ type: 'div', value: ',', before: ' ', after: ' ' }`\r\n- `{ type: 'div', value: ':', before: ' ', after: ' ' }`\r\n- `{ type: 'space', value: ' ' }` space as a separator\r\n- `{ type: 'function', value: 'name', before: '', after: '', nodes: [] }`\r\n\r\n## API\r\n\r\n```\r\nvar valueParser = require('postcss-value-parser');\r\n```\r\n\r\n### valueParser.unit(value)\r\n\r\nReturns parsed value.\r\n\r\n```js\r\n// .2rem\r\n{\r\n  number: '.2',\r\n  unit: 'rem'\r\n}\r\n```\r\n\r\n### valueParser.stringify(nodes)\r\n\r\nStringifies node and array of nodes.\r\n\r\n### valueParser.walk(nodes, cb[, bubble])\r\n\r\nWalks each provided node, recursively for each node in a function.\r\n\r\nReturning `false` in the callback will prevent traversal of deeper, nested nodes(inside a function). You can use this to walk over only the immediate children. *note: This only applies if `bubble` is `false`(default).*\r\n\r\nReturns `this` instance.\r\n\r\n- `nodes`: array - `value-parser` nodes\r\n- `cb(node, index, nodes)`: function - Function to execute for each node\r\n- `bubble`: boolean - Walk from the deepest nodes upwards\r\n\r\n### var p = valueParser(value)\r\n\r\nReturns parsed tree.\r\n\r\n### p.nodes\r\n\r\nRoot nodes list.\r\n\r\n### p.toString()\r\n\r\nStringify tree to the value.\r\n\r\n### p.walk(cb[, bubble])\r\n\r\nWalks each node since `p.nodes`.\r\n\r\n# License\r\n\r\nMIT Â© [Bogdan Chadkin](mailto:trysound@yandex.ru)\r\n",
  "readmeFilename": "README.md",
  "_id": "postcss-value-parser@3.1.2",
  "_shasum": "5ec98f70548b8158b3b8f9b5c13a2bac46fb1837",
  "_from": "postcss-value-parser@^3.1.1",
  "_resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-3.1.2.tgz"
}
